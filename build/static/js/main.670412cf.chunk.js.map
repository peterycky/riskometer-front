{"version":3,"sources":["Components/PreloadScreen.js","Components/InfoDetail.js","Components/InfectionInfo.js","App.js","serviceWorker.js","index.js"],"names":["preload","props","errMsg","err","className","src","process","alt","size","color","useStyles","makeStyles","theme","root","maxWidth","textAlign","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","Info","activity","classes","React","useState","expanded","setExpanded","title","data","placeFrom","placeDesc","length","slice","day","timeFrom","month","year","map","mapImg","placeTo","date","hour","timeDuration","type","activityTypeTitle","Card","CardHeader","avatar","action","IconButton","clsx","onClick","aria-expanded","aria-label","subheader","Collapse","in","timeout","unmountOnExit","CardMedia","image","CardContent","Typography","variant","gutterBottom","infectionInfo","list","activities","key","id","App","screen","dataAcquired","setDataAcquired","setData","transErr","setTransErr","useEffect","console","log","endpoint","window","location","pathname","interval","setInterval","axios","get","then","response","waiting","clearInterval","catch","error","InfectionInfo","PreloadScreen","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.670412cf.chunk.js","sourcesContent":["import React from 'react'\nimport HashLoader from \"react-spinners/HashLoader\";\n\nconst preload = (props) => {\n  let errMsg\n\n  if(props.err === true) {\n    errMsg = <p className=\"color--danger preloader-sub--no-margin\">\n      Ups... Coś poszło nie tak\n    </p>;\n    // console.log('error wykryty')\n  } else {\n    // console.log('error NIE wykryty')\n  }\n\n  return (\n    <div className=\"preloader\">\n      <img\n        src={process.env.PUBLIC_URL + \"/logo.png\"}\n        alt=\"Logo\"\n        className=\"preloader--img\"\n      />\n      <div className=\"preloader-text\">\n        <h1>Przetwarzamy Twoje dane</h1>\n        <h2 className=\"color--accent\">Proszę czekać</h2>\n      </div>\n      {/* PRELOADER ANIMATION */}\n      <div className=\"preloader-spinner\">\n        <HashLoader size={120} color={\"142850\"} />\n      </div>\n      <p className=\"preloader-sub\">\n        Wynik wyświetli się tak szybko jak tylko dane będą gotowe\n      </p>\n      {errMsg}\n    </div>\n  );\n}\n\nexport default preload ","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 500,\n    textAlign: \"left\"\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\" // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  },\n}));\n\nexport default function Info(activity) {\n  // console.log(activity.data)\n  const classes = useStyles()\n  const [expanded, setExpanded] = React.useState(false)\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  }\n\n  const title = activity.data.placeFrom.placeDesc.length >= 21 ? activity.data.placeFrom.placeDesc.slice(0, 17) + \"...\" : activity.data.placeFrom.placeDesc\n  const day = activity.data.timeFrom.slice(8, 10)\n  const month = activity.data.timeFrom.slice(5, 7)\n  const year = activity.data.timeFrom.slice(0, 4)\n  const map = activity.data.mapImg\n\n  const placeFrom = activity.data.placeFrom.placeDesc \n  const placeTo = activity.data.placeTo.placeDesc \n  const date = day + \"-\" + month + \"-\" + year\n  const hour = activity.data.timeFrom.slice(-4)\n  const duration = activity.data.timeDuration\n  const type = activity.data.activityTypeTitle\n\n  \n\n  return (\n    <div className=\"info-card\">\n      <Card className={classes.root}>\n        <CardHeader\n          avatar={<div className=\"info-detail--dot\"></div>}\n          action={\n            <IconButton\n              className={clsx(classes.expand, {\n                [classes.expandOpen]: expanded\n              })}\n              onClick={handleExpandClick}\n              aria-expanded={expanded}\n              aria-label=\"show more\"\n            >\n              <ExpandMoreIcon />\n            </IconButton>\n          }\n          title={title}\n          subheader={date}\n        />\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <CardMedia className={classes.media} image={map} />\n          <CardContent className=\"info-detail--card-detail color--secondary\">\n            <Typography variant=\"subtitle2\" className=\"info-detail--title\">\n              Miejsce Rozpoczęcia:\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              gutterBottom\n              className=\"info-detail--data\"\n            >\n              {placeFrom}\n            </Typography>\n\n            <Typography variant=\"subtitle2\" className=\"info-detail--title\">\n              Miejsce Zakończenia:\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              gutterBottom\n              className=\"info-detail--data\"\n            >\n              {placeTo}\n            </Typography>\n\n            <Typography variant=\"subtitle2\" className=\"info-detail--title\">\n              Data i Godzina:\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              gutterBottom\n              className=\"info-detail--data\"\n            >\n              {date + \" \" + hour}\n            </Typography>\n\n            <Typography variant=\"subtitle2\" className=\"info-detail--title\">\n              Czas trwania kontaktu:\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              gutterBottom\n              className=\"info-detail--data\"\n            >\n              {duration + \"minut\"}\n            </Typography>\n\n            <Typography variant=\"subtitle2\" className=\"info-detail--title\">\n              Typ kontaktu:\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              gutterBottom\n              className=\"info-detail--data\"\n            >\n              {type}\n            </Typography>\n            {/* <div>\n              <h3 className=\"info-detail--title\">Typ kontaktu:</h3>\n              <p className=\"info-detail--data\">{type}</p>\n            </div> */}\n          </CardContent>\n        </Collapse>\n      </Card>\n    </div>\n  );\n}\n\n// export default info\n","import React from 'react'\n\nimport Info from './InfoDetail';\n\nconst infectionInfo = (props) => {\n  // console.log(props);\n\n  return (\n    <div className=\"info\">\n      <img\n        src={process.env.PUBLIC_URL + \"/logo.png\"}\n        alt=\"Logo\"\n        className=\"preloader--img\"\n      />\n      <div>\n        <h1>WYNIK</h1>\n        <h3 className=\"color--primary\">Mogłe(a)ś mieć kontakt z zakażonym (podlegającym kwarantannie)</h3>\n      </div>\n      <div className=\"info-detail\">\n        <p className=\"color--secondary\">Szczegóły kontaktu:</p>\n      </div>\n      <div className=\"info-list\">\n        {\n        props.list.activities ? (\n          <div>\n            {\n              props.list.activities.map((activity) => {\n                return (<Info key={activity.id} data={activity} />)\n              })\n            }\n          </div>\n        ) : (\n          <p> Ładuję dane ... </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default infectionInfo","import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nimport PreloadScreen from './Components/PreloadScreen.js'\nimport InfectionInfo from './Components/InfectionInfo.js'\nimport axios from 'axios';\n\n// import Button from \"@material-ui/core/Button\";\n\nfunction App() {\n\n  // const [gotData, setGotData] = useState(false);\n  let screen\n  const [dataAcquired, setDataAcquired ]= useState(false)\n  const [data, setData] = useState({})\n  const [transErr, setTransErr] = useState(false)\n\n  useEffect(() => {\n    console.log(\"Mounted, acquiring info...\")\n    let endpoint = 'https://jsonvir.iwareprint.eu/status' + window.location.pathname\n\n    let query = () => {\n      axios.get(endpoint)\n      .then(response => {\n        // console.log(response.data)\n        if (response.data.waiting === false) {\n          setDataAcquired(true)\n          clearInterval(interval)\n          setData(response.data)\n          console.log('Data acquired successfully')\n        }\n      })\n      .catch(error => {\n        // console.warn(error)\n        setTransErr(true)\n      });\n    }\n\n    const interval = setInterval(query(), 3000)\n\n    // setTimeout(()=> {\n      // setDataAcquired(true)\n    // }, 10000)\n  }, [])\n\n  if(dataAcquired === true) {\n    screen = <InfectionInfo list={data} />\n  } else {\n    screen = <PreloadScreen err={transErr}/>\n  }\n\n  return (\n    <div className=\"App\">\n      {screen}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}